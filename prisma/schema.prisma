// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        String      @id @default(uuid())
  fullName                  String
  userName                  String      @unique
  email                     String      @unique
  password                  String
  avatar                    String?
  coverImage                String?
  creaditsLeft              Int         @default(3)
  Apis                      APIsTokens?
  notes                     Note[]
  chatHistory               Chat[]
  forgotPasswordToken       String?
  forgotPasswordTokenExpiry DateTime?
  verifyToken               String?
  verifyTokenExpiry         DateTime?
  isVerified                Boolean     @default(false)
  createdAt                 DateTime    @default(now())
  updatedAt                 DateTime?   @updatedAt
}

model APIsTokens {
  id     String  @id @default(uuid())
  user   User    @relation(fields: [userId], references: [id])
  userId String  @unique
  gemini String?
  openAi String?
  claude String?
  grok   String?
}

model Note {
  id        String @id @default(uuid())
  contenets QnA[]
  topic     String
  askedBy   User   @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime      @default(now())
}

model QnA {
  id       String @id @default(uuid())
  question String
  answer   String
  level    String
  note     Note   @relation(fields: [noteId], references: [id])
  noteId   String
}

model Chat {
  id        String        @id @default(ulid())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  messages  ChatMessage[]
  user      User?         @relation(fields: [userId], references: [id])
  userId    String?
  header    String        @default("Untitled")
}

model ChatMessage {
  id        String   @id @default(ulid())
  role      Role
  content   String
  createdAt DateTime @default(now())
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String
}

enum Role {
  user
  assistant
}
