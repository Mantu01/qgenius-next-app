'use client';

import React, { useState } from 'react';

type Difficulty = 'easy' | 'medium' | 'hard';

interface Question {
  text: string;
  difficulty: Difficulty;
  id: number;
}

interface Answer {
  question: string;
  answer: string;
  id: number;
  difficulty: Difficulty;
  timestamp: number;
}

export default function ChatPage() {
  const [questions, setQuestions] = useState<Question[]>([]);
  const [currentQuestion, setCurrentQuestion] = useState<string>('');
  const [currentDifficulty, setCurrentDifficulty] = useState<Difficulty>('medium');
  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);
  const [chatHistory, setChatHistory] = useState<Answer[]>([]);

  const handleAddQuestion = () => {
    if (currentQuestion.trim() !== '') {
      setQuestions([
        ...questions, 
        { 
          text: currentQuestion, 
          difficulty: currentDifficulty,
          id: Date.now()
        }
      ]);
      setCurrentQuestion('');
      setCurrentDifficulty('medium');
    }
  };

  const handleRemoveQuestion = (id: number) => {
    setQuestions(questions.filter(q => q.id !== id));
  };

  const handleSubmit = async () => {
    setIsSubmitting(true);
    try {
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 1500));
      const mockAnswers: Answer[] = questions.map((q, i) => ({
        question: q.text,
        answer: `This is a detailed answer for question ${i + 1} (${q.difficulty} difficulty). In a real application, this would be generated by your AI or API. The answer includes multiple paragraphs to demonstrate the formatting capabilities of the UI.

        Second paragraph of the answer showing how longer responses are handled. Complex answers with multiple sections will be displayed clearly with proper spacing and readability.`,
        id: q.id,
        difficulty: q.difficulty,
        timestamp: Date.now()
      }));
      
      // Add new answers to chat history
      setChatHistory([...chatHistory, ...mockAnswers]);
      setQuestions([]);
    } catch (error) {
      console.error("Error submitting questions:", error);
    } finally {
      setIsSubmitting(false);
    }
  };

  const getDifficultyColor = (difficulty: Difficulty) => {
    switch (difficulty) {
      case 'easy': return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200';
      case 'medium': return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200';
      case 'hard': return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200';
      default: return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200';
    }
  };

  const formatDate = (timestamp: number) => {
    return new Date(timestamp).toLocaleString();
  };

  return (
    <div className="min-h-screen bg-gray-50 dark:bg-gray-900 transition-colors duration-200 py-8 px-4">
      <div className="max-w-4xl mx-auto">
        <div className="text-center mb-8">
          <h1 className="text-3xl font-bold text-green-600 dark:text-green-400 mb-2">
            Question Submission System
          </h1>
          <p className="text-gray-600 dark:text-gray-400">
            Ask your questions and view the complete chat history
          </p>
        </div>

        {/* Chat History */}
        {chatHistory.length > 0 && (
          <div className="bg-white dark:bg-gray-800 rounded-xl shadow-md overflow-hidden transition-colors duration-200 mb-6">
            <div className="p-6 border-b border-gray-200 dark:border-gray-700">
              <h2 className="text-xl font-semibold text-green-600 dark:text-green-400">
                Chat History
              </h2>
            </div>
            <div className="p-6 space-y-6">
              {chatHistory.map((item, index) => (
                <div key={item.id} className="space-y-3">
                  <div className="flex items-start">
                    <span className="bg-green-100 dark:bg-green-800 text-green-800 dark:text-green-200 rounded-full w-8 h-8 flex items-center justify-center mr-3 text-sm font-medium flex-shrink-0">
                      {index + 1}
                    </span>
                    <div className="flex-1">
                      <div className="flex items-center justify-between mb-1">
                        <div className="flex items-center">
                          <h3 className="text-lg font-medium text-gray-800 dark:text-gray-200 mr-2">
                            {item.question}
                          </h3>
                          <span className={`px-2 py-1 rounded-md text-xs font-medium ${getDifficultyColor(item.difficulty)}`}>
                            {item.difficulty}
                          </span>
                        </div>
                        <span className="text-xs text-gray-500 dark:text-gray-400">
                          {formatDate(item.timestamp)}
                        </span>
                      </div>
                      <div className="prose dark:prose-invert max-w-none">
                        {item.answer.split('\n\n').map((paragraph, i) => (
                          <p key={i} className="text-gray-700 dark:text-gray-300 mb-3">
                            {paragraph}
                          </p>
                        ))}
                      </div>
                    </div>
                  </div>
                  {index < chatHistory.length - 1 && (
                    <div className="border-t border-gray-200 dark:border-gray-700 my-4"></div>
                  )}
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Questions Input */}
        <div className="bg-white dark:bg-gray-800 rounded-xl shadow-md overflow-hidden transition-colors duration-200">
          <div className="p-6 border-b border-gray-200 dark:border-gray-700">
            <h2 className="text-xl font-semibold text-green-600 dark:text-green-400 mb-4">
              {questions.length > 0 ? `${questions.length} Question${questions.length > 1 ? 's' : ''} Added` : 'Add Your Questions'}
            </h2>
            
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                  Your Question
                </label>
                <textarea
                  value={currentQuestion}
                  onChange={(e) => setCurrentQuestion(e.target.value)}
                  placeholder="Type your question here..."
                  className="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500 dark:bg-gray-700 dark:text-white transition"
                  rows={4}
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  Difficulty Level
                </label>
                <div className="flex space-x-2">
                  {(['easy', 'medium', 'hard'] as Difficulty[]).map((difficulty) => (
                    <button
                      key={difficulty}
                      type="button"
                      onClick={() => setCurrentDifficulty(difficulty)}
                      className={`flex-1 py-2 px-3 rounded-md text-sm font-medium capitalize transition-colors ${
                        currentDifficulty === difficulty
                          ? getDifficultyColor(difficulty)
                          : 'bg-gray-100 text-gray-700 hover:bg-gray-200 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600'
                      }`}
                    >
                      {difficulty}
                    </button>
                  ))}
                </div>
              </div>

              <button
                onClick={handleAddQuestion}
                disabled={!currentQuestion.trim()}
                className="w-full py-2 px-4 bg-green-600 hover:bg-green-700 text-white font-medium rounded-lg transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
              >
                Add Question
              </button>
            </div>
          </div>

          {/* Questions List */}
          <div className="p-6">
            {questions.length === 0 ? (
              <div className="text-center py-8 text-gray-500 dark:text-gray-400">
                <svg xmlns="http://www.w3.org/2000/svg" className="h-12 w-12 mx-auto mb-3" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                No questions added yet
              </div>
            ) : (
              <>
                <ul className="space-y-3 max-h-96 overflow-y-auto pr-2 mb-6">
                  {questions.map((question) => (
                    <li key={question.id} className="group relative bg-gray-50 dark:bg-gray-700 rounded-lg p-3 transition-colors duration-150">
                      <div className="flex justify-between items-start">
                        <div>
                          <span className={`inline-block px-2 py-1 text-xs rounded-md ${getDifficultyColor(question.difficulty)} mb-1`}>
                            {question.difficulty}
                          </span>
                          <p className="text-gray-800 dark:text-gray-200">{question.text}</p>
                        </div>
                        <button
                          onClick={() => handleRemoveQuestion(question.id)}
                          className="opacity-0 group-hover:opacity-100 text-red-500 hover:text-red-700 dark:text-red-400 dark:hover:text-red-300 transition-opacity duration-150"
                        >
                          <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                          </svg>
                        </button>
                      </div>
                    </li>
                  ))}
                </ul>

                <button
                  onClick={handleSubmit}
                  disabled={isSubmitting}
                  className="w-full py-3 px-4 bg-green-600 hover:bg-green-700 text-white font-medium rounded-lg transition-colors flex items-center justify-center shadow-md"
                >
                  {isSubmitting ? (
                    <>
                      <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                      </svg>
                      Processing Questions...
                    </>
                  ) : "Submit Questions"}
                </button>
              </>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}