"use client"

import React, { useState } from 'react'
import { NotebookText, Send, Plus, Trash2, Loader2 } from 'lucide-react';

const Note = () => {
  const [questions, setQuestions] = useState([''])
  const [difficulties, setDifficulties] = useState<('easy' | 'medium' | 'hard')[]>(['easy'])
  const [answers, setAnswers] = useState<(string | null)[]>([])
  const [isProcessing, setIsProcessing] = useState(false)
  const [currentProcessingIndex, setCurrentProcessingIndex] = useState(0)

  const handleQuestionChange = (index: number, value: string) => {
    const newQuestions = [...questions]
    newQuestions[index] = value
    setQuestions(newQuestions)
  }

  const handleDifficultyChange = (index: number, value: 'easy' | 'medium' | 'hard') => {
    const newDifficulties = [...difficulties]
    newDifficulties[index] = value
    setDifficulties(newDifficulties)
  }

  const addQuestionField = () => {
    if (questions.length < 10) {
      setQuestions([...questions, ''])
      setDifficulties([...difficulties, 'easy'])
    }
  }

  const removeQuestionField = (index: number) => {
    if (questions.length > 1) {
      const newQuestions = [...questions]
      newQuestions.splice(index, 1)
      setQuestions(newQuestions)
      
      const newDifficulties = [...difficulties]
      newDifficulties.splice(index, 1)
      setDifficulties(newDifficulties)
      
      const newAnswers = [...answers]
      newAnswers.splice(index, 1)
      setAnswers(newAnswers)
    }
  }

  const processQuestions = () => {
    setIsProcessing(true)
    setCurrentProcessingIndex(0)
    setAnswers(questions.map(() => null))
    
    const mockProcessing = () => {
      if (currentProcessingIndex < questions.length) {
        setTimeout(() => {
          const newAnswers = [...answers]
          newAnswers[currentProcessingIndex] = 
            `This is a mock answer for question "${questions[currentProcessingIndex]}" (Difficulty: ${difficulties[currentProcessingIndex]}). In a real application, this would be generated by your AI system.`
          setAnswers(newAnswers)
          setCurrentProcessingIndex(currentProcessingIndex + 1)
          mockProcessing()
        }, 1000)
      } else {
        setIsProcessing(false)
      }
    }
    
    mockProcessing()
  }

  const allQuestionsEmpty = questions.every(q => q.trim() === '')
  const anyQuestionsFilled = questions.some(q => q.trim() !== '')

  return (
    <div className="min-h-[91vh] bg-gray-50 dark:bg-gray-950 font-sans transition-colors duration-300">
      <div className="max-w-4xl mx-auto p-4 sm:p-6 lg:p-8">
        <div className="flex items-center mb-10">
          <h1 className="text-3xl font-extrabold flex items-center gap-3 text-green-700 dark:text-green-400">
            <NotebookText className="w-8 h-8" />
            Smart Notes AI
          </h1>
        </div>

        <div className="mb-10 bg-white dark:bg-gray-900 rounded-2xl shadow-xl p-6 md:p-8 border border-gray-200 dark:border-gray-800">
          <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6">
            <h2 className="text-2xl font-bold text-gray-800 dark:text-gray-100 mb-4 sm:mb-0">
              Ask your questions
            </h2>
            <span className="text-md font-medium text-gray-500 dark:text-gray-400">
              {questions.length}/10 questions
            </span>
          </div>

          <div className="space-y-5 mb-6">
            {questions.map((question, index) => (
              <div key={index} className="flex flex-col sm:flex-row gap-3 items-start sm:items-center">
                <div className="flex-1 relative w-full">
                  <input
                    type="text"
                    value={question}
                    onChange={(e) => handleQuestionChange(index, e.target.value)}
                    placeholder={`Question ${index + 1}`}
                    className="w-full px-5 py-3 bg-gray-100 dark:bg-gray-800 border border-gray-300 dark:border-gray-700 rounded-xl focus:ring-2 focus:ring-green-500 focus:border-green-500 outline-none text-gray-800 dark:text-gray-200 placeholder-gray-400 dark:placeholder-gray-500 transition-all duration-200 ease-in-out shadow-sm"
                  />
                  {questions.length > 1 && (
                    <button
                      onClick={() => removeQuestionField(index)}
                      className="absolute right-3 top-1/2 -translate-y-1/2 p-2 text-gray-500 hover:text-red-600 dark:hover:text-red-500 transition-colors duration-200 rounded-full"
                      aria-label="Remove question"
                    >
                      <Trash2 className="w-5 h-5" />
                    </button>
                  )}
                </div>
                <div className="w-full sm:w-auto">
                  <select
                    value={difficulties[index]}
                    onChange={(e) => handleDifficultyChange(index, e.target.value as 'easy' | 'medium' | 'hard')}
                    className="w-full sm:w-32 px-4 py-3 bg-gray-100 dark:bg-gray-800 border border-gray-300 dark:border-gray-700 rounded-xl focus:ring-2 focus:ring-green-500 focus:border-green-500 outline-none text-gray-800 dark:text-gray-200 appearance-none pr-8 transition-all duration-200 ease-in-out shadow-sm"
                  >
                    <option value="easy">Easy</option>
                    <option value="medium">Medium</option>
                    <option value="hard">Hard</option>
                  </select>
                </div>
              </div>
            ))}
          </div>

          <div className="flex flex-col sm:flex-row justify-between gap-4">
            <button
              onClick={addQuestionField}
              disabled={questions.length >= 10}
              className={`flex items-center justify-center gap-2 px-6 py-3 rounded-xl font-semibold text-lg ${questions.length >= 10 ? 'bg-gray-200 dark:bg-gray-800 text-gray-500 cursor-not-allowed' : 'bg-green-100 dark:bg-green-900/30 text-green-700 dark:text-green-400 hover:bg-green-200 dark:hover:bg-green-900/50'} transition-all duration-300 ease-in-out shadow-md hover:shadow-lg`}
            >
              <Plus className="w-5 h-5" />
              Add Question
            </button>

            <button
              onClick={processQuestions}
              disabled={isProcessing || allQuestionsEmpty}
              className={`flex items-center justify-center gap-2 px-8 py-3 rounded-xl font-bold text-lg ${isProcessing || allQuestionsEmpty ? 'bg-red-300 dark:bg-red-900/50 cursor-not-allowed' : 'bg-red-600 hover:bg-red-700 active:bg-red-800 focus:ring-2 focus:ring-red-500'} text-white transition-all duration-300 ease-in-out shadow-lg hover:shadow-xl transform hover:-translate-y-0.5`}
            >
              {isProcessing ? (
                <>
                  <Loader2 className="w-5 h-5 animate-spin" />
                  Processing...
                </>
              ) : (
                <>
                  <Send className="w-5 h-5" />
                  Get Answers
                </>
              )}
            </button>
          </div>
        </div>

        {anyQuestionsFilled && (
          <div className="space-y-6">
            {questions.map((question, index) => (
              <div key={index} className="bg-white dark:bg-gray-900 rounded-2xl shadow-xl overflow-hidden border border-gray-200 dark:border-gray-800">
                <div className="p-5 border-b border-gray-200 dark:border-gray-800 bg-gray-100 dark:bg-gray-800/50">
                  <h3 className="font-semibold text-lg text-gray-800 dark:text-gray-100 flex items-center justify-between">
                    <span>
                      Q{index + 1}: {question || <span className="text-gray-400 italic">Empty question</span>}
                    </span>
                    <span className="text-sm font-medium text-green-600 dark:text-green-400 capitalize">
                      {difficulties[index]}
                    </span>
                  </h3>
                </div>
                <div className="p-6 md:p-8">
                  {answers[index] ? (
                    <p className="text-gray-700 dark:text-gray-300 whitespace-pre-wrap leading-relaxed">
                      {answers[index]}
                    </p>
                  ) : (
                    <div className="flex items-center justify-center min-h-24">
                      {isProcessing && currentProcessingIndex === index ? (
                        <div className="flex items-center gap-3 text-green-600 dark:text-green-400">
                          <Loader2 className="w-6 h-6 animate-spin" />
                          <span className="text-lg font-medium">Generating answer...</span>
                        </div>
                      ) : (
                        <p className="text-gray-400 italic text-lg">Answer will appear here</p>
                      )}
                    </div>
                  )}
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  )
}

export default Note
